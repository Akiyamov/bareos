#!/bin/bash
set -e
set -o pipefail
set -u
#
# Run multiple backups in parallel in small volumes and
#   then restore them.
#
TestName="$(basename "$(pwd)")"
export TestName

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions

start_test

backupjob="slow-backup-small-volumes"
parallelbackuplog="$tmp/small-volumes-parallel-backup.out"
parallelrestorelog="$tmp/small-volumes-parallel-restore.out"

cat <<END_OF_DATA >"$tmp/bconcmds"
@$out /dev/null
messages
@$out $parallelbackuplog
run job=${backupjob} level=Full yes
run job=${backupjob} level=Full yes
run job=${backupjob} level=Full yes
run job=${backupjob} level=Full yes
run job=${backupjob} level=Full yes
run job=${backupjob} level=Full yes
wait
messages
@$out $parallelrestorelog
restore jobid=13 where=$tmp/restore13 all done yes
wait
restore jobid=14 where=$tmp/restore14 all done yes
wait
restore jobid=15 where=$tmp/restore15 all done yes
wait
restore jobid=16 where=$tmp/restore16 all done yes
wait
restore jobid=17 where=$tmp/restore17 all done yes
wait
restore jobid=18 where=$tmp/restore18 all done yes
wait
messages
quit
END_OF_DATA

run_bconsole

if [[ $(grep -c "Termination:.*Backup OK" "$parallelbackuplog") -ne "6" ]]; then
    echo "Not all backups jobs finished successfully."
    estat=1
fi

if [[ $(grep -c "Termination:.*Restore OK" "$parallelrestorelog") -ne "6" ]]; then
    echo "Not all restore jobs finished successfully."
    estat=2
fi

for i in {13..18}; do
    restoredir="$tmp/restore$i"
    check_restore_diff "${BackupDirectory}" "$restoredir"
done

end_test
