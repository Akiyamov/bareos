#!/bin/bash
set -e
set -u
#
# Run a simple backup
#   then restore it.
#
TestName="$(basename "$(pwd)")"
export TestName

JobName=backup-to-pool1
#shellcheck source=../environment.in
. ./environment

JobName=backup-bareos-fd
#shellcheck source=../scripts/functions
. "${rscripts}"/functions
"${rscripts}"/cleanup
"${rscripts}"/setup


# Directory to backup.
# This directory will be created by setup_data "$@"().
BackupDirectory="${tmp}/data"

# Use a tgz to setup data to be backed up.
# Data will be placed at "${tmp}/data/".
setup_data "$@"

start_test

cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/log1.out
setdebug level=100 storage=File
setdevice storage=File device=MultiFileStorage0001 autoselect=yes
setdevice storage=File device=MultiFileStorage0002 autoselect=yes
setdevice storage=File device=MultiFileStorage0003 autoselect=yes
run job=backup-to-pool1 level=Full yes
run job=backup-to-pool2 level=Full yes
run job=backup-to-pool3 level=Full yes
run job=backup-to-pool1 level=Full yes
run job=backup-to-pool2 level=Full yes
run job=backup-to-pool3 level=Full yes
status storage=File
wait
messages
@#
@# now do a restore
@#
@$out $tmp/log2.out
restore client=bareos-fd fileset=SelfTest where=$tmp/bareos-restores select all done
yes
wait
messages
@#
@# now purge and truncate
@#
@$out $tmp/log3.out
purge volume=Full-0001
truncate volstatus=Purged drive=0 yes
purge volume=Full-0002
truncate volstatus=Purged drive=1 yes
purge volume=Full-0003
truncate volstatus=Purged drive=2 yes
messages
quit
END_OF_DATA

run_bareos "$@"
check_for_zombie_jobs storage=File
stop_bareos

check_two_logs
check_restore_diff ${BackupDirectory}

#make sure all the setdevice commands were successful
grep "3000 OK setdevice=MultiFileStorage0001 autoselect=1" "${tmp}"/log1.out >/dev/null 2>&1 &&
grep "3000 OK setdevice=MultiFileStorage0002 autoselect=1" "${tmp}"/log1.out >/dev/null 2>&1 &&
grep "3000 OK setdevice=MultiFileStorage0003 autoselect=1" "${tmp}"/log1.out >/dev/null 2>&1
if test $? -ne 0 ; then
  echo "The setdevice command failed for a MultiFileStorage."
  estat=1;
fi

if test $estat -ne 1 ; then
  #make sure all MultiFileStorage devices are used
  grep "Using Device \"MultiFileStorage0001\"" "${tmp}"/log1.out >/dev/null 2>&1 &&
  grep "Using Device \"MultiFileStorage0002\"" "${tmp}"/log1.out >/dev/null 2>&1 &&
  grep "Using Device \"MultiFileStorage0003\"" "${tmp}"/log1.out >/dev/null 2>&1
  if test $? -ne 0 ; then
    echo "Not all MultiFileStorage devices are used."
    estat=1;
  fi
fi

#make sure all volumes are purged
grep "There are no more Jobs associated with Volume \"Full-0001\". Marking it purged." "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "There are no more Jobs associated with Volume \"Full-0002\". Marking it purged." "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "There are no more Jobs associated with Volume \"Full-0003\". Marking it purged." "${tmp}"/log3.out >/dev/null 2>&1
if test $? -ne 0 ; then
  echo "The Purge command failed for a MultiFileStorage."
  estat=1;
fi


#make sure all volumes are correctly truncated with the correct drive
grep "3000 OK label. VolBytes=223 Volume=\"Full-0001\" Device=\"MultiFileStorage0001\" (storage)" "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "3000 OK label. VolBytes=223 Volume=\"Full-0002\" Device=\"MultiFileStorage0002\" (storage)" "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "3000 OK label. VolBytes=223 Volume=\"Full-0003\" Device=\"MultiFileStorage0003\" (storage)" "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "The volume 'Full-0001' has been truncated." "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "The volume 'Full-0002' has been truncated." "${tmp}"/log3.out >/dev/null 2>&1 &&
grep "The volume 'Full-0003' has been truncated." "${tmp}"/log3.out >/dev/null 2>&1
if test $? -ne 0 ; then
  echo "The Truncate command failed for a MultiFileStorage."
  estat=1;
fi

end_test
