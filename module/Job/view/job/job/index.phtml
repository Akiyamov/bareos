<?php

/**
 *
 * bareos-webui - Bareos Web-Frontend
 *
 * @link      https://github.com/bareos/bareos-webui for the canonical source repository
 * @copyright Copyright (c) 2013-2015 Bareos GmbH & Co. KG (http://www.bareos.org/)
 * @license   GNU Affero General Public License (http://www.gnu.org/licenses/)
 * @author    Frank Bergkemper
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

$title = 'Jobs';
$this->headTitle($title);

?>

<ul class="nav nav-tabs">
	<li class="active"><a href="<?php echo $this->url('job', array('action'=>'index')); ?>"><?php echo $this->translate('Overview'); ?></a></li>
	<li><a href="<?php echo $this->url('job', array('action'=>'run')); ?>"><?php echo $this->translate('Run'); ?></a></li>
</ul>

<br />

<div class="row">

<div class="col-md-3">
	<?php echo $this->formRow($form->get('period')); ?>
</div>

<div class="col-md-3">
        <?php echo $this->formRow($form->get('status')); ?>
</div>

</div>

<br />

<div class="row">

<div class="col-md-12">

<div class="panel panel-default">

<div class="panel-heading">
<h3 class="panel-title">Overview</h3>
</div>

<div class="panel-body">

<table class="table table-hover" id="jobtable">

<thead class="bg-primary">
	<th></th>
	<th><?php echo $this->translate("Job"); ?></th>
	<th><?php echo $this->translate("Name"); ?></th>
	<th><?php echo $this->translate("Client"); ?></th>
	<th><?php echo $this->translate("Type"); ?></th>
	<th><?php echo $this->translate("Level"); ?></th>
	<th><?php echo $this->translate("Start"); ?></th>
	<th><?php echo $this->translate("End"); ?></th>
	<!--<th><?php echo $this->translate("Files"); ?></th>-->
	<!--<th><?php echo $this->translate("Bytes"); ?></th>-->
	<th><?php echo $this->translate("Status"); ?></th>
	<th><?php echo $this->translate("Actions"); ?></th>
</thead>

</table>

</div>
</div>
</div>
</div>

<?php
   echo $this->headScript()->prependFile($this->basePath() . '/js/jquery.dataTables.min.js');
   echo $this->headScript()->prependFile($this->basePath() . '/js/dataTables.bootstrap.min.js');
   echo $this->headLink()->prependStylesheet($this->basePath() . '/css/dataTables.bootstrap.min.css');
?>

<!-- modal-001 start -->
<div id="modal-001" class="modal fade modal-001" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
  <div class="modal-dialog modal-md">
    <div class="modal-content">
	<div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">Failed to retrieve data from Bareos director</h4>
      </div>
      <div class="modal-body">
	<p>Please try to reduce the amount of data to display, e.g. reduce time period.</p>
	<p>Error message received from director:</p>
	<p class="text-danger">Failed to send result as json. Maybe result message to long?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<!-- modal-001 end -->

<style>

td.details-control:after {
   font-family: "Glyphicons Halflings";
   content: "\e081";
   cursor: pointer;
}

tr.shown td.details-control:after {
   font-family: "Glyphicons Halflings";
   content: "\e082";
   cursor: pointer;
}

</style>

<script>

function format( d ) {

	if(d.jobbytes == 0) {
		var b = "-";
	}
	else {
                var k = 1000;
                var units = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB"];
                var i = Math.floor(Math.log(d.jobbytes) / Math.log(k));
                var b = parseFloat((d.jobbytes / Math.pow(k, i)).toFixed(2)) + " " + units[i];
	}

	return '<table class="table table-bordered">'+
		'<tr>'+
                '<th>Files</th>'+
                '<td>'+ d.jobfiles +'</td>'+
                '</tr>'+
                '<tr>'+
                '<th>Bytes</th>'+
                '<td>'+ b +'</td>'+
                '</tr>'+
		'<tr>'+
                '<th>Errors</th>'+
                '<td>'+ d.joberrors +'</td>'+
                '</tr>'+
                '</table>';

}

function updateQueryParams(k, v)
{
	var p = [];
	var params = [];

	p['status'] = '<?php echo $this->status; ?>';
	p['period'] = '<?php echo $this->period; ?>';

	if(k == 'status' && v == 'running') {
		p['period'] = 'all';
	}
	else if(k == 'status' && v == 'waiting') {
		p['period'] = 'all';
	}

	p[k] = v;

	for(key in p) {
            params.push(key + "=" + p[key]);
        }

        return params.join('&');

}

$(document).ready(function() {

	var table = $('#jobtable').DataTable( {
		"ajax": {
			"url": "<?php echo $this->url('job', array('action' => 'getData'), null) . '?data=jobs&status='.$this->status.'&period='.$this->period; ?>",
			"dataSrc": ""
		},
		"columns": [
			{
				"className": 'details-control',
				"data": null,
				"orderable": false,
				"defaultContent": ''
			},
			{ "data": null },
			{ "data": null },
			{ "data": null },
			{ "data": null },
			{ "data": null },
			{ "data": null },
			{ "data": null },
			//{ "data": null },
			//{ "data": null },
			{ "data": null },
			{
				"orderable": false,
				"data": null
			}
		],
		"paging":   true,
		"ordering": true,
		"info":     true,
		"pagingType": "full_numbers",
		"stateSave": true,
		"columnDefs": [
			{
				"targets": 1,
				"data": null,
				"render": function(data, type, full, meta) {
					return '<a href="<?php echo $this->basePath() . '/job/details/'; ?>'+data.jobid+'">'+data.jobid+'</a>';
				}
			},
			{
                                "targets": 2,
                                "data": null,
                                "render": function(data, type, full, meta) {
                                        return data.name;
                                }
                        },
			{
                                "targets": 3,
                                "data": null,
                                "render": function(data, type, full, meta) {
                                        return '<a href="<?php echo $this->basePath() . '/client/details/'; ?>'+data.client+'">'+data.client+'</a>';
                                }
                        },
			{
                                "targets": 4,
                                "data": null,
                                "render": function(data, type, full, meta) {
					var output;
					switch(data.type) {
						case 'B':
							output = 'Backup';
							break;
						case 'M':
							output = 'Migrated';
							break;
						case 'V':
							output = 'Verify';
							break;
						case 'R':
							output = 'Restore';
							break;
						case 'U':
							output = 'Console program';
							break;
						case 'I':
							output = 'Internal system job';
							break;
						case 'D':
							output = 'Admin';
							break;
						case 'A':
							output = 'Archive';
							break;
						case 'C':
							output = 'Copy of a job';
							break;
						case 'c':
							output = 'Copy job';
							break;
						case 'g':
							output = 'Migration job';
							break;
						case 'S':
							output = 'Scan';
							break;
						default:
							output = data.type;
							break;
					}
					return output;
                                }
                        },
			{
                                "targets": 5,
                                "data": null,
                                "render": function(data, type, full, meta) {
					if(data.level == "F") {
						return 'Full';
					}
					else if(data.level == "D") {
						return 'Differential';
					}
					else if(data.level == "I") {
						return 'Incremental';
					}
					else {
						return data.level;
					}
                                }
                        },
			{
                                "targets": 6,
                                "data": null,
                                "render": function(data, type, full, meta) {
                                        return data.starttime;
                                }
                        },
			{
                                "targets": 7,
                                "data": null,
                                "render": function(data, type, full, meta) {
                                        return data.endtime;
                                }
                        },
			/*{
				"targets": 7,
                                "data": null,
                                "render": function(data, type, full, meta) {
                                        return data.jobfiles;
                                }
                        },
			{
                                "targets": 8,
                                "data": null,
                                "render": function(data, type, full, meta) {
					if(data.jobbytes == 0) return "0.00 B";
                                        var k = 1000;
                                        var units = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB"];
                                        var i = Math.floor(Math.log(data.jobbytes) / Math.log(k));
                                        return parseFloat((data.jobbytes / Math.pow(k, i)).toFixed(2)) + " " + units[i];
                                }
                        },*/
			{
                                "targets": 8,
                                "data": null,
                                "render": function(data, type, full, meta) {

					var output;

					switch(data.jobstatus) {

						// Non-fatal error
						case 'e':
							output = '<span class="label label-danger">Failure</span>';
							break;
						// Terminated with errors
						case 'E':
							output = '<span class="label label-danger">Failure</span>';
							break;
						// Fatal error
						case 'f':
							output = '<span class="label label-danger">Failure</span>';
							break;
						// Terminated successful
						case 'T':
							output = '<span class="label label-success">Success</span>';
							break;
						// Running
						case 'R':
							output = '<span class="label label-info">Running</span>';
							break;
						// Created no yet running
						case 'C':
							output = '<span class="label label-default">Queued</span>';
							break;
						// Blocked
						case 'B':
							output = '<span class="label label-warning">Blocked</span>';
							break;
						// Verify found differences
						case 'D':
							output = '<span class="label label-warning">Verify found differences</span>';
							break;
						// Canceled by user
						case 'A':
							output = '<span class="label label-warning">Canceled</span>';
							break;
						// Waiting for client
						case 'F':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting for storage daemon
						case 'S':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting for new media
						case 'm':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting for media mount
						case 'M':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting for storage resource
						case 's':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting for job resource
						case 'j':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting for client resource
						case 'c':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting on maximum jobs
						case 'd':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting on starttime
						case 't':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// Waiting on higher priority jobs
						case 'p':
							output = '<span class="label label-default">Waiting</span>';
							break;
						// SD despooling attributes
						case 'a':
							output = '<span class="label label-info">SD despooling attributes</span>';
							break;
						// Doing batch insert file records
						case 'i':
							output = '<span class="label label-info">Doing batch insert file records</span>';
							break;
						// Incomplete
						case 'I':
							output = '<span class="label label-primary">Incomplete</span>';
							break;
						// Committing data
						case 'L':
							output = '<span class="label label-info">Committing data</span>';
							break;
						// Terminated with warnings
						case 'W':
							output = '<span class="label label-warning">Warning</span>';
							break;
						// Doing data despooling
						case 'l':
							output = '<span class="label label-info">Doing data despooling</span>';
							break;
						// Queued waiting for device
						case 'q':
							output = '<span class="label label-default">Queued waiting for device</span>';
							break;
						// Default
						default:
							output = '<span class="label label-primary">' + data.jobStatus + '</span>';
							break;
					}

                                        return output;
				}

                        },
			{
                                "targets": 9,
                                "data": null,
                                "render": function(data, type, full, meta) {
					if(data.type == 'B') {
						if(data.jobstatus == 'T' || data.jobstatus == 'E' || data.jobstatus == 'e' || data.jobstatus == 'f' || data.jobstatus == 'A') {
							return '<a class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="top" href="<?php echo $this->basePath() . '/job/rerun/'; ?>'+data.jobid+'" title="Rerun" id="btn-1"><span class="glyphicon glyphicon-repeat"></span></a>';
						}
						else if(
							data.jobstatus == 'F' ||
							data.jobstatus == 'S' ||
							data.jobstatus == 'm' ||
							data.jobstatus == 'M' ||
							data.jobstatus == 's' ||
							data.jobstatus == 'j' ||
							data.jobstatus == 'c' ||
							data.jobstatus == 'd' ||
							data.jobstatus == 't' ||
							data.jobstatus == 'p' ||
							data.jobstatus == 'q' ||
							data.jobstatus == 'C' ||
							data.jobstatus == 'R' ||
							data.jobstatus == 'l'
						) {
							return '<a class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="top" href="<?php echo $this->basePath() . '/job/cancel/'; ?>'+data.jobid+'" title="Cancel" id="btn-1"><span class="glyphicon glyphicon-trash"></span></a>';
						}
					}
                                        return '';
                                }
                        }
		]
	} );

	$('#jobtable tbody').on('click', 'td.details-control', function () {
		var tr = $(this).closest('tr');
		var row = table.row( tr );
		if ( row.child.isShown() ) {
			// This row is already open - close it
			row.child.hide();
			tr.removeClass('shown');
		}
		else {
			// Open this row
			row.child( format(row.data()) ).show();
			tr.addClass('shown');
		}
	} );

	$('#jobtable tbody').on('mouseover', '#btn-1', function () {
		$('[data-toggle="tooltip"]').tooltip();
	});

	$('#period').change(function(event) {
		window.location.href = window.location.pathname + '?' + updateQueryParams('period', this.value);
	});

	$('#status').change(function(event) {
                window.location.href = window.location.pathname + '?' + updateQueryParams('status', this.value);
        });

	$.fn.dataTable.ext.errMode = 'throw';

	$('#jobtable').on('error.dt', function(e, settings, techNote, message) {
		$("#modal-001").modal();
	});

} );

</script>
