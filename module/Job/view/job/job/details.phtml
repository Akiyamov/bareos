<?php

/**
 *
 * bareos-webui - Bareos Web-Frontend
 *
 * @link   https://github.com/bareos/bareos-webui for the canonical source repository
 * @copyright   Copyright (c) 2013-2015 Bareos GmbH & Co. KG (http://www.bareos.org/)
 * @license   GNU Affero General Public License (http://www.gnu.org/licenses/)
 * @author   Frank Bergkemper
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

$title = 'Job details';
$this->headTitle($title);

?>

<!-- Job -->
<div class="row">

<div class="col-md-12">

<div class="panel panel-default">

<div class="panel-heading">
<h3 class="panel-title">Job</h3>
</div>

<div class="panel-body">

<table class="table table-hover" id="jobdetails1">

<thead class="bg-primary">
   <th>Job</th>
   <th>Name</th>
   <th>Client</th>
   <th>Fileset</th>
   <th>Type</th>
   <th>Level</th>
   <th>Pool</th>
</thead>

</table>

<table class="table table-hover" id="jobdetails2">

<thead class="bg-primary">
   <th>Scheduled start</th>
   <th>Real start</th>
   <th>End</th>
   <th>Real end</th>
</thead>

</table>

<table class="table table-hover" id="jobdetails3">

<thead class="bg-primary">
   <th>Files</th>
   <th>Bytes</th>
   <th>Errors</th>
   <th>Status</th>
</thead>

</table>

</div>
</div>
</div>
</div>

<!-- Log -->
<div class="row">

<div class="col-md-12">

<div class="panel panel-default">

<div class="panel-heading">
<h3 class="panel-title">Messages</h3>
</div>

<div class="panel-body">

<table class="table table-hover" id="joblog">

   <thead class="bg-primary">
      <th>Timestamp</th>
      <th>Message</th>
   </thead>

</table>

</div>
</div>
</div>
</div>


<?php
   echo $this->headScript()->prependFile($this->basePath() . '/js/jquery.dataTables.min.js');
   echo $this->headScript()->prependFile($this->basePath() . '/js/dataTables.bootstrap.min.js');
   echo $this->headLink()->prependStylesheet($this->basePath() . '/css/dataTables.bootstrap.min.css');
?>

<script>

$(document).ready(function() {

   var jobdetails1 = $('#jobdetails1').DataTable( {
      "ajax": {
         "url": "<?php echo $this->url('job', array('action' => 'getData'), null) . '?data=details&jobid='.$this->jobid; ?>",
         "dataSrc": ""
      },
      "columns": [
         { "data": "jobid" },
         { "data": "name" },
         { "data": "client" },
         { "data": "fileset" },
         { "data": "type" },
         { "data": "level" },
         { "data": "poolname" }
      ],
      "paging":   false,
      "ordering": false,
      "info":     false,
      "pagingType": "full_numbers",
      "stateSave": true,
      "bFilter": false,
      "columnDefs": [
         {
            "targets": 4,
            "render": function(data, type, full, meta) {
               var output;
               switch(data) {
                  case 'B':
                      output = 'Backup';
                      break;
                  case 'M':
                      output = 'Migrated';
                      break;
                  case 'V':
                      output = 'Verify';
                      break;
                  case 'R':
                      output = 'Restore';
                      break;
                  case 'U':
                      output = 'Console program';
                      break;
                  case 'I':
                      output = 'Internal system job';
                      break;
                  case 'D':
                      output = 'Admin';
                      break;
                  case 'A':
                      output = 'Archive';
                      break;
                  case 'C':
                      output = 'Copy of a job';
                      break;
                  case 'c':
                      output = 'Copy job';
                      break;
                  case 'g':
                      output = 'Migration job';
                      break;
                  case 'S':
                      output = 'Scan';
                      break;
                  default:
                      output = data;
                      break;
               }
               return output;
            }
         },
         {
            "targets": 5,
            "render": function(data, type, full, meta) {
               switch(data) {
                  case 'F':
                     return 'Full';
                  case 'D':
                     return 'Differential';
                  case 'I':
                     return 'Incremental';
                  default:
                     return data;
               }
            }
         }
      ]
   } );

   var jobdetails2 = $('#jobdetails2').DataTable( {
      "ajax": {
         "url": "<?php echo $this->url('job', array('action' => 'getData'), null) . '?data=details&jobid='.$this->jobid; ?>",
         "dataSrc": ""
      },
      "columns": [
         { "data": "schedtime" },
         { "data": "starttime" },
         { "data": "endtime" },
         { "data": "realendtime" }
      ],
      "paging":   false,
      "ordering": false,
      "info":     false,
      "pagingType": "full_numbers",
      "stateSave": true,
      "bFilter": false,
      "columnDefs": [
      ]
   } );

   var jobdetails3 = $('#jobdetails3').DataTable( {
      "ajax": {
         "url": "<?php echo $this->url('job', array('action' => 'getData'), null) . '?data=details&jobid='.$this->jobid; ?>",
         "dataSrc": ""
      },
      "columns": [
         { "data": "jobfiles" },
         { "data": null },
         { "data": "joberrors" },
         { "data": null }
      ],
      "paging":   false,
      "ordering": false,
      "info":     false,
      "pagingType": "full_numbers",
      "stateSave": true,
      "bFilter": false,
      "columnDefs": [
         {
            "targets": 1,
            "data": null,
            "render": function(data, type, full, meta) {
               if(data.jobbytes == 0) return "0.00 B";
               var k = 1000;
               var units = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB"];
               var i = Math.floor(Math.log(data.jobbytes) / Math.log(k));
               return parseFloat((data.jobbytes / Math.pow(k, i)).toFixed(2)) + " " + units[i];
            }
         },
         {
            "targets": 3,
            "data": null,
            "render": function(data, type, full, meta) {

               var output;

               switch(data.jobstatus) {
                  // Non-fatal error
                  case 'e':
                     output = '<span class="label label-danger">Failure</span>';
                     break;
                  // Terminated with errors
                  case 'E':
                     output = '<span class="label label-danger">Failure</span>';
                     break;
                  // Fatal error
                  case 'f':
                     output = '<span class="label label-danger">Failure</span>';
                     break;
                  // Terminated successful
                  case 'T':
                     output = '<span class="label label-success">Success</span>';
                     break;
                  // Running
                  case 'R':
                     output = '<span class="label label-info">Running</span>';
                     break;
                  // Created no yet running
                  case 'C':
                     output = '<span class="label label-default">Queued</span>';
                     break;
                  // Blocked
                  case 'B':
                     output = '<span class="label label-warning">Blocked</span>';
                     break;
                  // Verify found differences
                  case 'D':
                     output = '<span class="label label-warning">Verify found differences</span>';
                     break;
                  // Canceled by user
                  case 'A':
                     output = '<span class="label label-warning">Canceled</span>';
                     break;
                  // Waiting for client
                  case 'F':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting for storage daemon
                  case 'S':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting for new media
                  case 'm':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting for media mount
                  case 'M':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting for storage resource
                  case 's':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting for job resource
                  case 'j':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting for client resource
                  case 'c':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting on maximum jobs
                  case 'd':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting on starttime
                  case 't':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // Waiting on higher priority jobs
                  case 'p':
                     output = '<span class="label label-default">Waiting</span>';
                     break;
                  // SD despooling attributes
                  case 'a':
                     output = '<span class="label label-info">SD despooling attributes</span>';
                     break;
                  // Doing batch insert file records
                  case 'i':
                     output = '<span class="label label-info">Doing batch insert file records</span>';
                     break;
                  // Incomplete
                  case 'I':
                     output = '<span class="label label-primary">Incomplete</span>';
                     break;
                  // Committing data
                  case 'L':
                     output = '<span class="label label-info">Committing data</span>';
                     break;
                  // Terminated with warnings
                  case 'W':
                     output = '<span class="label label-warning">Warning</span>';
                     break;
                  // Doing data despooling
                  case 'l':
                     output = '<span class="label label-info">Doing data despooling</span>';
                     break;
                  // Queued waiting for device
                  case 'q':
                     output = '<span class="label label-default">Queued waiting for device</span>';
                     break;
                  // Default
                  default:
                     output = '<span class="label label-primary">' + data.jobStatus + '</span>';
                     break;
               }

               return output;
            }
         }
      ]
   } );

   var joblog = $('#joblog').DataTable( {
      "ajax": {
         "url": "<?php echo $this->url('job', array('action' => 'getData'), null) . '?data=logs&jobid='.$this->jobid; ?>",
         "dataSrc": ""
      },
      "columns": [
         { "data": "time" },
         { "data": null }
      ],
      "paging":   true,
      "ordering": true,
      "info":     true,
      "pagingType": "full_numbers",
      "stateSave": true,
      "order": [[0, 'desc']],
      "columnDefs": [
         {
            "targets": 1,
            "data": null,
            "render": function(data, type, full, meta) {
               var msg = (data.logtext).replace(/\n/g, "<br />");
               if(msg.search("Error") > 0) {
                  return msg.replace(/Error/g, '<span class="bg-danger text-danger">Error</span>');
               }
               else if(msg.search("error") > 0) {
                  return msg.replace(/error/g, '<span class="bg-danger text-danger">error</span>');
               }
               else if(msg.search("Warning") > 0) {
                  return msg.replace(/Warning/g, '<span class="bg-warning text-warning">Warning</span>');
               }
               else {
                  return msg;
               }
            }
         }
      ]
   } );

} );

</script>
