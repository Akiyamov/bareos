#!/bin/sh
#
# Script to setup running Bareos regression tests
#

check_exit_code()
{
   if [ $? != 0 ] ; then
      echo "Bad exit code giving up"
      exit 1
   fi
}

. ./config

cwd=`pwd`
if [ ! -d ${BAREOS_SOURCE} ] ; then
   echo "The BAREOS_SOURCE environment variable must be a Bareos release directory, but is not."
   echo " "
   exit 1
fi

MAKEOPTS=${MAKEOPT:-"-j3"}

#
# We build and setup binaries to the $cwd/bin directory not $bin
#
rm -rf build bin

#
# See if this is a git clone
#
if [ -f .git/config ]; then
   #
   # See if we have git available.
   #
   GIT=`which git 2>/dev/null`
   if [ ! -z "${GIT}" ] ; then
      ${GIT} pull

      #
      # If the source dir is a seperate git repo update it now to the latest source
      #
      if [ -f ${BAREOS_SOURCE}/.git/config ]; then
         (cd ${BAREOS_SOURCE}; ${GIT} pull)
      fi

      #
      # Copy new source
      #
      echo "Copying source from ${BAREOS_SOURCE}"
      cp -rp ${BAREOS_SOURCE} build

      ${GIT} show HEAD | grep commit | head -1 | awk '{print $2}' > build/git-version
   else
      #
      # Copy new source
      #
      echo "Copying source from ${BAREOS_SOURCE}"
      cp -rp ${BAREOS_SOURCE} build

      echo "Git not found." > build/git-version
   fi
else
   #
   # Copy new source
   #
   echo "Copying source from ${BAREOS_SOURCE}"
   cp -rp ${BAREOS_SOURCE} build

   echo "Not a Git repository." > build/git-version
fi

scripts/create_sed

#
# In default bareos-dir.conf.in, change default file
# to backup to be build directory
#
echo "s%File = @sbindir@%File = @BUILD_DIR@%g" >tmp/t$$
echo "s%File = \"@sbindir@\"%File = \"@BUILD_DIR@\"%g" >tmp/t$$
sed -f tmp/t$$ build/src/dird/bareos-dir.conf.in >tmp/o$$
cp tmp/o$$ build/src/dird/bareos-dir.conf.in
rm -f tmp/t$$ tmp/o$$

#
# Now turn on DEVELOPER for regression testing
#
echo "s%^.*define DEVELOPER 1.*$%#define DEVELOPER 1%g" >tmp/t$$
sed -f tmp/t$$ build/src/include/version.h >tmp/o$$
cp tmp/o$$ build/src/include/version.h

#
# Remove unneeded directories
#
rm -rf build/txt build/src/testprogs
sed -f tmp/sed_tmp scripts/regress-config.in >scripts/regress-config
chmod 755 scripts/regress-config
cp scripts/regress-config build
cd build
rm -f Makefile config.*

#
# Run Bareos configuration, make, install
#
./regress-config ${cwd}
check_exit_code

#
# Cleanup any build in source
#
make clean
make ${MAKEOPT}
check_exit_code
make install
if [ a${KEEP_SOURCE} = a ]; then
   rm -rf examples patches
   check_exit_code
   # eliminate non-essential directories to reduce
   #   size.  Otherwise regress run too long
   rm -rf src/win32 examples patches
fi

#
# Get all tests -- especially testls
#
cd src/tests
make installall
check_exit_code
cd ../..

#
# Get all tools -- especially timelimit
#
cd src/tools
make installall
check_exit_code

cd ${cwd}
bin/bareos stop

mkdir -p working
cd bin
echo "Running database creation scripts"
./create_bareos_database ${DBTYPE}
./drop_bareos_tables ${DBTYPE}
./make_bareos_tables ${DBTYPE}
./grant_bareos_privileges ${DBTYPE}
cd ${cwd}

#
# Start and stop Bareos to ensure conf files are OK
#
bin/bareos start
bin/bareos stop

#
# Save Bareos default conf files for later use
#
cp -f bin/*.conf scripts
