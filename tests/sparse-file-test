#!/bin/sh
#
# Run a simple backup of the Bareos build directory using the Sparse option
#   then restore it.
#
TestName="gigaslam-sparse-test"
JobName=SparseTest
#JobName=SparseCompressedTest

. scripts/functions

scripts/cleanup
scripts/copy-test-confs

# Directory to backup.
# This example uses a subdirectory of the bareos source/build directory,
# that contains some file but isn't to large.
BackupDirectory="${cwd}/build/src/tests/"

# the default fileset FS_TESTJOB backups all file and directories defined in "${tmp}/file-list".
echo "${BackupDirectory}" >${tmp}/file-list

mkdir -p "${BackupDirectory}"

SPARSEFILE="${BackupDirectory}/gigaslam.gif"

# create a sparse file
scripts/create_sparse_file.sh ${SPARSEFILE} 100M
if [ $? != 0 ]; then
    set_error "create_sparse_file failed."
    rm -f ${SPARSEFILE}
    exit 1
fi

if ! [ -e "${SPARSEFILE}" ]; then
    set_error "Failed to create sparse file."
    exit 1
fi

start_test

cat >${cwd}/tmp/bconcmds <<END_OF_DATA
@$out /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=File volume=TestVolume001
run job=$JobName yes
wait
messages
list volumes
@#
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
restore where=${cwd}/tmp/bareos-restores select storage=File
unmark *
mark *
done
yes
wait
messages
quit
END_OF_DATA

run_bareos
check_for_zombie_jobs storage=File
stop_bareos

size_orig=`du ${SPARSEFILE} | cut -f 1`
size=`du ${cwd}/tmp/bareos-restores/${SPARSEFILE} | cut -f 1`
if [ -z "$size" ]; then
    set_error "Failed to determine size of restored sparse file."
elif [ $size -gt 120 ]; then
    set_error "Restored sparse file ${SPARSEFILE} is too big (${size}K > 120K)"
fi

print_debug "size orig:     $size_orig"
print_debug "size restored: $size"

check_two_logs
check_restore_diff "${BackupDirectory}"

rm -f ${SPARSEFILE}

end_test
