#!/bin/sh

. scripts/functions

#
# Example regression test.
#
# Use this as a template for your own tests.
#

# Define the Name of the test as "TestName".
# Should be the same as the filename, therefore we use the filename as default.
TestName="`basename $0`"
#TestName="1-example-test"

# set other test specific variables
Client=bareos-fd
JobName=backup-bareos-fd
BackupJobIds="1,2"
BvfsPathId="b201"

# Directory to backup.
# This example uses a subdirectory of the bareos source/build directory,
# that contains some file but isn't to large.
BackupDirectory="${cwd}/build/src/tests/"
BackupFileExtra=${BackupDirectory}/extrafile.txt

# Remove old configuration, working and tmp files. Setup the database.
cleanup

# Config files will be copied to required location.
# Base configuration files come from the
# configs/BASE/ directory, see
# configs/BASE/README.txt for an overview of the provides resources.
# Store your additonal resources to
# configs/$TestName.
# It is also possible to overwrite resources from configs/BASE.
# If you define a full config file (instead of config files for individual resources),
# only these will be taken.
copy_configs

# the default fileset FS_TESTJOB backups all file and directories defined in "${tmp}/file-list".
echo "${BackupDirectory}" >${tmp}/file-list

# start the test
start_test

echo "Test Content 1" > ${BackupFileExtra}

# ${tmp}/bconcmds lists the bconsole commands executed by "run_bareos"
cat <<END_OF_DATA >${tmp}/bconcmds
messages
@$out ${tmp}/log-backup1.out w
label storage=File1 pool=Default volume=TestVolume001
run job=$JobName storage=File1 yes
wait
messages
quit
END_OF_DATA

# Start the bareos daemons
# and run the bconsole commands from ${tmp}/bconcmds
# Further bconsole commands can be executed by "run_bconsole".
run_bareos
check_log ${tmp}/log-backup1.out


# modify file and rerun backup
echo "Test Content 2" >> ${BackupFileExtra}

cat <<END_OF_DATA >${tmp}/bconcmds
@$out ${tmp}/log-backup2.out w
run job=$JobName storage=File1 yes
wait
messages
quit
END_OF_DATA

run_bconsole
check_log ${tmp}/log-backup2.out


# use bvfs to restore
cat <<END_OF_DATA >${tmp}/bconcmds
@#
@# bvfs
@#
.bvfs_update
@$out ${tmp}/log-bvfs-jobids.out w
.bvfs_get_jobids jobid=2

@$out ${tmp}/log-bvfs-get-root-path.out w
.bvfs_lsdir jobid=${BackupJobIds} path=

@$out ${tmp}/log-bvfs-lsdir-root.out w
.bvfs_lsdir jobid=${BackupJobIds} path=/

@$out ${tmp}/log-bvfs-lsdir-BackupDirectory.out w
.bvfs_lsdir jobid=${BackupJobIds} path=${BackupDirectory}

@$out ${tmp}/log-bvfs-lsfiles-BackupDirectory.out w
.bvfs_lsfiles jobid=${BackupJobIds} pathid=1

@$out ${tmp}/log-bvfs-versions-extrafile.out w
.bvfs_versions jobid=0 client=${Client} path=${BackupDirectory} fname=extrafile.txt

@$out ${tmp}/log-bvfs-restore.out w
@#
@# now do a restore
@#
.bvfs_restore path=${BvfsPathId} jobid=${BackupJobIds} dirid=1
@#.bvfs_restore fileid=numlist dirid=numlist hardlink=numlist path=b201

restore client=${Client} where=${tmp}/bareos-restores storage=File1 file=?${BvfsPathId} yes
.bvfs_cleanup path=${BvfsPathId}

wait
messages
quit
END_OF_DATA

run_bconsole

# verify that all are terminated
check_for_zombie_jobs storage=File1 client=${Client}

# stop bareos
stop_bareos

# check tmp/log1.out and tmp/log2.out for errors
#check_two_logs
check_log ${tmp}/log-bvfs-jobids.out
check_log ${tmp}/log-bvfs-get-root-path.out
check_log ${tmp}/log-bvfs-lsdir-root.out
check_log ${tmp}/log-bvfs-lsdir-BackupDirectory.out

check_log ${tmp}/log-bvfs-lsfiles-BackupDirectory.out
if ! grep -q "\Wextrafile.txt" ${tmp}/log-bvfs-lsfiles-BackupDirectory.out; then
   set_error "File not found using .bvfs_lsfiles."
fi

check_log ${tmp}/log-bvfs-versions-extrafile.out
versions=`grep "^[0-9]\+\W" ${tmp}/log-bvfs-versions-extrafile.out | wc -l`
if [ "$versions" !=  "2" ]; then
   set_error "Expected 2 versions of file ${BackupFileExtra}, found ${versions}."
fi

check_log ${tmp}/log-bvfs-restore.out
# check for differences between original files and restored files
check_restore_diff ${BackupDirectory}

# do some manual testing
if [ ! -d ${BackupDirectory} ]; then
    set_error "Directory ${BackupDirectory} does not exists any more."
fi

# end tests and check for error codes
end_test
